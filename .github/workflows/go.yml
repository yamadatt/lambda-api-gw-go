name: Go CI/CD

on:
  # „Åô„Åπ„Å¶„ÅÆ„Éñ„É©„É≥„ÉÅ„Å∏„ÅÆ„Éó„ÉÉ„Ç∑„É•„Å®„Éó„É´„É™„ÇØ„Ç®„Çπ„Éà„ÅßÁô∫ÁÅ´
  push:
    branches: [ '**' ]  # „Åô„Åπ„Å¶„ÅÆ„Éñ„É©„É≥„ÉÅ
  pull_request:
    branches: [ '**' ]  # „Åô„Åπ„Å¶„ÅÆ„Éñ„É©„É≥„ÉÅ

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    # MySQL„Çµ„Éº„Éì„Çπ„Ç≥„É≥„ÉÜ„Éä„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: stocks
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
   
      # actions-timeline„ÅØpostÂá¶ÁêÜ„ÅÆÊúÄÂæå„Å´ÂÆüË°å„Åï„Çå„Å™„ÅÑ„Å®ÂÖ®„Å¶„ÅÆ„Ç∏„Éß„Éñ„ÅÆÊÉÖÂ†±„ÇíÂèéÈõÜ„Åß„Åç„Å™„ÅÑ„Åü„ÇÅ„ÄÅ
      # Âëº„Å≥Âá∫„Åó„ÅØ `actions/checkout` „Å™„Å©„Çà„Çä„ÇÇÂâç„ÅÆ‰∏ÄÁï™ÊúÄÂàù„Å´Ë°å„ÅÑ„Åæ„Åô„ÄÇ
    - uses: Kesin11/actions-timeline@v2.2.3

    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Install dependencies
      run: |
        go mod download
        go install github.com/swaggo/swag/cmd/swag@latest
        go install github.com/axw/gocov/gocov@latest
        go install github.com/AlekSi/gocov-xml@latest

    - name: Generate Swagger docs
      run: swag init

    - name: Build
      run: go build -v ./...

    - name: Run unit tests
      run: |
        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      env:
        MYSQL_USER: test
        MYSQL_PASSWORD: test
        DB_HOST: localhost
        MYSQL_DATABASE: stocks

    - name: Convert coverage to Cobertura format
      run: |
        gocov convert coverage.txt | gocov-xml > coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.txt
        flags: unittests
        fail_ci_if_error: false
        verbose: true

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.txt
          coverage.xml

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest

    - name: Generate coverage report HTML
      run: |
        go tool cover -html=coverage.txt -o coverage.html

    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html
        path: coverage.html

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: stocks
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Install dependencies
      run: |
        go mod download
        go install github.com/swaggo/swag/cmd/swag@latest

    - name: Generate Swagger docs
      run: swag init

    - name: Generate Swagger docs
      run: |
        # „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Å´Âêà„Çè„Åõ„ÅüSwagger„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê
        mkdir -p docs
        cat > docs/swagger.yaml << EOF
        openapi: 3.0.0
        info:
          title: Stock Management API
          description: Âú®Â∫´ÁÆ°ÁêÜ„ÅÆ„Åü„ÇÅ„ÅÆ API
          version: 1.0.0
        # ... „Åì„Åì„Å´ÂøÖË¶Å„Å™Swagger„Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆÂÜÖÂÆπ„ÇíÂÖ•„Çå„Çã ...
        EOF
        
        # ÂøÖË¶Å„Å´Âøú„Åò„Å¶swag init„ÇíÂÆüË°å
        swag init

    - name: Prepare test environment
      run: |
        # „ÉÜ„Çπ„ÉàÁî®„ÅÆconfig.go„Çí‰ΩúÊàêÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶Ôºâ
        cat > config.go << EOF
        package main
        
        import (
          "github.com/gin-gonic/gin"
          swaggerFiles "github.com/swaggo/files"
          ginSwagger "github.com/swaggo/gin-swagger"
        )
        
        func setupTestRouter() *gin.Engine {
          r := gin.New()
          
          // Swagger„Éè„É≥„Éâ„É©„ÅÆË®≠ÂÆö
          r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
          r.GET("/api-docs/swagger.yaml", func(c *gin.Context) {
            c.File("./swagger.yaml")
          })
          
          return r
        }
        EOF

    - name: Run integration tests
      run: |
        # GIN„ÅÆ„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâÊúâÂäπÂåñ
        export GIN_MODE=debug
        # Ë©≥Á¥∞„Å™„ÉÜ„Çπ„Éà„É≠„Ç∞„ÇíÂá∫Âäõ
        go test -v -tags=integration ./... 2>&1 | tee test.log
        # „ÉÜ„Çπ„Éà„É≠„Ç∞„ÇíÁ¢∫Ë™ç
        echo "Test log contents:"
        cat test.log
      env:
        MYSQL_USER: test
        MYSQL_PASSWORD: test
        DB_HOST: localhost
        MYSQL_DATABASE: stocks
        DEBUG: "true"

  swagger-tests:
    name: Swagger Tests
    runs-on: ubuntu-latest
    needs: build
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: stocks
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Install dependencies
      run: |
        go mod download
        go install github.com/swaggo/swag/cmd/swag@latest

    - name: Generate Swagger docs
      run: swag init

    - name: Create DB config file
      run: |
        echo '{"host": "localhost", "port": 3306, "user": "test", "password": "test", "database": "stocks"}' > db_config.json
      
    - name: Verify MySQL connection
      run: |
        echo "Checking MySQL connection..."
        mysql -h127.0.0.1 -utest -ptest -e "SELECT 'MySQL connection successful!';"
    
    - name: Initialize database schema
      run: |
        echo "Initializing database schema..."
        cat <<EOF > init.sql
        USE stocks;
        CREATE TABLE IF NOT EXISTS stocks (
          name VARCHAR(255) PRIMARY KEY,
          amount INT NOT NULL
        );
        INSERT INTO stocks (name, amount) VALUES ('apple', 10), ('banana', 5) 
        ON DUPLICATE KEY UPDATE amount = VALUES(amount);
        EOF
        mysql -h127.0.0.1 -utest -ptest stocks < init.sql
        echo "Schema initialized. Checking tables:"
        mysql -h127.0.0.1 -utest -ptest -e "USE stocks; SHOW TABLES; SELECT * FROM stocks;"
    
    - name: Run swagger tests
      run: go test -v -tags=swagger -timeout=30s ./...
      env:
        MYSQL_USER: test
        MYSQL_PASSWORD: test
        DB_HOST: localhost
        MYSQL_DATABASE: stocks
        DB_CONFIG_PATH: ./db_config.json
        DEBUG: "true"  # „Éá„Éê„ÉÉ„Ç∞Âá∫Âäõ„ÇíÊúâÂäπÂåñ

  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Coverage Report
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
        
    - name: Display Coverage
      run: |
        echo "## Code Coverage Report" >> $GITHUB_STEP_SUMMARY
        COVERAGE=$(grep -oP 'total:\s+\(statements\)\s+\K[0-9.]+' coverage.txt || echo "N/A")
        echo "- Statement coverage: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
        
        # „Ç´„Éê„É¨„ÉÉ„Ç∏„Å´Âü∫„Å•„ÅÑ„Å¶Ëâ≤„ÇíË®≠ÂÆö
        if (( $(echo "$COVERAGE < 50" | bc -l) )); then
          COLOR="red"
        elif (( $(echo "$COVERAGE < 80" | bc -l) )); then
          COLOR="yellow"
        else
          COLOR="brightgreen"
        fi
        
        # „Çπ„ÉÜ„Éº„Çø„Çπ„Éê„ÉÉ„Ç∏„ÇíÁîüÊàê
        echo "![Coverage](https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR})" >> $GITHUB_STEP_SUMMARY
        
        # „Ç´„Éê„É¨„ÉÉ„Ç∏„É¨„Éù„Éº„Éà„ÅÆË©≥Á¥∞„ÇíË°®Á§∫
        echo "## Detailed Coverage" >> $GITHUB_STEP_SUMMARY
        cat coverage.txt >> $GITHUB_STEP_SUMMARY
        
        # PR„ÅÆÂ†¥Âêà„ÄÅ„Ç´„Éê„É¨„ÉÉ„Ç∏„ÇíPR„Å´„Ç≥„É°„É≥„Éà„Åô„Çã
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "üíØ **Code Coverage**: ${COVERAGE}%" > /tmp/pr-comment.txt
          gh pr comment ${{ github.event.pull_request.number }} --body-file /tmp/pr-comment.txt
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build, integration-tests]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: stocks
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Create DB config file
      run: |
        echo '{"host": "localhost", "port": 3306, "user": "test", "password": "test", "database": "stocks"}' > db_config.json

    - name: Run E2E tests
      run: go test -v -tags=e2e ./...
      env:
        MYSQL_USER: test
        MYSQL_PASSWORD: test
        DB_HOST: localhost
        MYSQL_DATABASE: stocks
        DB_CONFIG_PATH: ./db_config.json

  # docker:
  #   name: Build and Push Docker image
  #   runs-on: ubuntu-latest
  #   needs: [build, integration-tests, swagger-tests, e2e-tests]
  #   # main„Éñ„É©„É≥„ÉÅ„Å∏„ÅÆ„Éó„ÉÉ„Ç∑„É•ÊôÇ„ÅÆ„ÅøDocker„Ç§„É°„Éº„Ç∏„Çí„Éì„É´„Éâ„Åó„Å¶„Éó„ÉÉ„Ç∑„É•„Åô„Çã
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v2
      
  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v2
  #     with:
  #       # GitHub„ÅÆ„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„Åã„ÇâË™çË®ºÊÉÖÂ†±„ÇíÂèñÂæó
  #       username: ${{ secrets.DOCKERHUB_USERNAME }}
  #       password: ${{ secrets.DOCKERHUB_TOKEN }}
        
  #   - name: Build and push
  #     uses: docker/build-push-action@v4
  #     with:
  #       context: .
  #       push: true
  #       tags: ${{ secrets.DOCKERHUB_USERNAME }}/lambda-api-gw-go:latest
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max