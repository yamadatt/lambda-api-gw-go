// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// EmptyDataResponse defines model for EmptyDataResponse.
type EmptyDataResponse struct {
	Message *string `json:"message,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error エラーメッセージ
	Error string `json:"error"`
}

// Stock defines model for Stock.
type Stock struct {
	// Amount 在庫の数量
	Amount *int `json:"amount,omitempty"`

	// Name 在庫の名前
	Name string `json:"name"`
}

// StockRequest defines model for StockRequest.
type StockRequest struct {
	// Amount 在庫の数量
	Amount *int `json:"amount,omitempty"`

	// Name 在庫の名前
	Name string `json:"name"`
}

// StocksResponse 在庫のリスト
type StocksResponse = []Stock

// CreateOrUpdateStockJSONRequestBody defines body for CreateOrUpdateStock for application/json ContentType.
type CreateOrUpdateStockJSONRequestBody = StockRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllStocks request
	GetAllStocks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateStockWithBody request with any body
	CreateOrUpdateStockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdateStock(ctx context.Context, body CreateOrUpdateStockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStockByName request
	GetStockByName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllStocks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllStocksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateStockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateStockRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateStock(ctx context.Context, body CreateOrUpdateStockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateStockRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStockByName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStockByNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllStocksRequest generates requests for GetAllStocks
func NewGetAllStocksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stocks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrUpdateStockRequest calls the generic CreateOrUpdateStock builder with application/json body
func NewCreateOrUpdateStockRequest(server string, body CreateOrUpdateStockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateStockRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrUpdateStockRequestWithBody generates requests for CreateOrUpdateStock with any type of body
func NewCreateOrUpdateStockRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stocks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStockByNameRequest generates requests for GetStockByName
func NewGetStockByNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stocks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllStocksWithResponse request
	GetAllStocksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllStocksResponse, error)

	// CreateOrUpdateStockWithBodyWithResponse request with any body
	CreateOrUpdateStockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateStockResponse, error)

	CreateOrUpdateStockWithResponse(ctx context.Context, body CreateOrUpdateStockJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateStockResponse, error)

	// GetStockByNameWithResponse request
	GetStockByNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetStockByNameResponse, error)
}

type GetAllStocksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAllStocksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllStocksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrUpdateStockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Stock
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateStockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateStockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStockByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetStockByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStockByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllStocksWithResponse request returning *GetAllStocksResponse
func (c *ClientWithResponses) GetAllStocksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllStocksResponse, error) {
	rsp, err := c.GetAllStocks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllStocksResponse(rsp)
}

// CreateOrUpdateStockWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateStockResponse
func (c *ClientWithResponses) CreateOrUpdateStockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateStockResponse, error) {
	rsp, err := c.CreateOrUpdateStockWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateStockResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateStockWithResponse(ctx context.Context, body CreateOrUpdateStockJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateStockResponse, error) {
	rsp, err := c.CreateOrUpdateStock(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateStockResponse(rsp)
}

// GetStockByNameWithResponse request returning *GetStockByNameResponse
func (c *ClientWithResponses) GetStockByNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetStockByNameResponse, error) {
	rsp, err := c.GetStockByName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStockByNameResponse(rsp)
}

// ParseGetAllStocksResponse parses an HTTP response from a GetAllStocksWithResponse call
func ParseGetAllStocksResponse(rsp *http.Response) (*GetAllStocksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllStocksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateOrUpdateStockResponse parses an HTTP response from a CreateOrUpdateStockWithResponse call
func ParseCreateOrUpdateStockResponse(rsp *http.Response) (*CreateOrUpdateStockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateStockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Stock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetStockByNameResponse parses an HTTP response from a GetStockByNameWithResponse call
func ParseGetStockByNameResponse(rsp *http.Response) (*GetStockByNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStockByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 全ての在庫を取得
	// (GET /stocks)
	GetAllStocks(c *gin.Context)
	// 在庫を登録または更新
	// (POST /stocks)
	CreateOrUpdateStock(c *gin.Context)
	// 指定した名前の在庫を取得
	// (GET /stocks/{name})
	GetStockByName(c *gin.Context, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAllStocks operation middleware
func (siw *ServerInterfaceWrapper) GetAllStocks(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllStocks(c)
}

// CreateOrUpdateStock operation middleware
func (siw *ServerInterfaceWrapper) CreateOrUpdateStock(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrUpdateStock(c)
}

// GetStockByName operation middleware
func (siw *ServerInterfaceWrapper) GetStockByName(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStockByName(c, name)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/stocks", wrapper.GetAllStocks)
	router.POST(options.BaseURL+"/stocks", wrapper.CreateOrUpdateStock)
	router.GET(options.BaseURL+"/stocks/:name", wrapper.GetStockByName)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWXW8bRRT9K9HA4yp2gLz4iRQqlAdoVcRT5Yfp+sbd4p3ZzowjrGil7m5LAk1o1K80",
	"bVAoBRRa2S2fSmlpfsx01/RfoDu7a3vjdQo0ipD65JFn9t5zzz33zCwRm7seZ8CUJLUlIu2z4FKzPO56",
	"qvM+VfQUSI8zCfinJ7gHQjlgjrggJW2aDfiMul4LSI3oaFlHT3W4p4PVuHsr3trRwYYOnungjg6vEYuo",
	"jofnpBIOaxLfH/zDz5wDWxHfIseF4GJyXsBtXDRA2sLxlMMZZg53dPQjJo/u6ijS4RMDZJdYpfCiTbN4",
	"nHz1ff/324OPSxEKON92BDRI7XSWvV4C+2PF7U/H4VKXt5lK8S7QdkuR2oy1D3u8tRP/8UAHveTGoxfL",
	"V0Yhz1QHqRymoAkCczHqwjgFgzDx+lr8xVqhcurh78uqM3EnFncKzrdBqkOvcfZwSjxDGWX0FWuUo8Kb",
	"kFtH93X4WEcro+lPD2nAnqXwM9p9a7g5O9jL8Pp1izgKXMPkmwIWSI28URlOZiUby0oqsOHEUCFoh/hY",
	"n8MWOH5uc6aobToBLnVayELb87hQ72ZAp23ukgGEuZPzUzr8TUdfm8FZwehlRfd7d/vrn2PpwbYOAx30",
	"puZOziPVjjLcG2xTH1JGm+ACU9n2IgiZxpmZrk5XMTz3gFHPITXytvnLIh5VZ03xFWk6gMsmqJIRH5te",
	"HTzobz55sfqzDm7ocFUHP+jgog4vx5d2zLqXwk+iS/E3P+nw6l9713M/2tQXQmLgCIrx5xukRj4ANddq",
	"pUIgKJtUCwbSW9VqTjGkYsfmOrb5unJOIsTcQ3HFGZxYMLp4aVOHokOlHHR83Jf9ulFAkamkey/e3Y33",
	"tvrd60j67L/EfiCEgj2XJDeCeqqjddOj3FjxnGy7LhUdlFWxQTq8Gl+5GT/bQEnRpsQ5zcRQ9y3icVki",
	"h+TmI9PMi4MYmRYuBKbD2zp4mGx8G3dvjeZJ7vyafzhJBe8JoApOiE+8BlWQjl3qISDVMd7oHBqXBVv1",
	"i06lRBv8V9TgP7CT8f7lE5VTaAhLVtbjL7dRS+8cpZae764l3Xs6uG889yHKKXXe/6Wo9+mwyGCZtH0r",
	"N73KElqyP9H7ktXluHc7t7nt9Pr7TwZn+n6s8xHeAGi+grqgQEhjVfvM38wkhgovj9+8Dh5B8x7eJywN",
	"WhSxNdKD/Vdz/ehM9rXx1lwqG+M6OdBnTRQQi+VawGd1+J2OfhmFQCzSFvjKqCzOmIdMFrT86ZRcW3v+",
	"51b2NMgUk2X36/7fAQAA//+WMY+vjgwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
